# -*- coding: utf-8 -*-

"""
This file is part of the PROPheT tool.

Copyright (C) 2016: MKLab <pmitzias@iti.gr; mriga@iti.gr; skontopo@iti.gr>

http://mklab.iti.gr/project/prophet-ontology-populator
https://github.com/MKLab-ITI/prophet

Licensed under the Apache License, Version 2.0 (the "License").
You may use this file in compliance with the License. 
For more details, see LICENCE file. 

"""

# Form implementation generated from reading ui file 'ui\MainWindow.ui'
#
# Created by: PyQt4 UI code generator 4.11.4
#
# WARNING! All changes made in this file will be lost!

from PyQt4 import QtCore, QtGui

try:
    _fromUtf8 = QtCore.QString.fromUtf8
except AttributeError:
    def _fromUtf8(s):
        return s

try:
    _encoding = QtGui.QApplication.UnicodeUTF8
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig, _encoding)
except AttributeError:
    def _translate(context, text, disambig):
        return QtGui.QApplication.translate(context, text, disambig)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName(_fromUtf8("MainWindow"))
        MainWindow.resize(807, 537)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/PROPheT Logo.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.centralwidget = QtGui.QWidget(MainWindow)
        self.centralwidget.setObjectName(_fromUtf8("centralwidget"))
        self.gridLayout = QtGui.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName(_fromUtf8("gridLayout"))
        self.tableWidgetMyModelStats = QtGui.QTableWidget(self.centralwidget)
        self.tableWidgetMyModelStats.setEnabled(True)
        self.tableWidgetMyModelStats.setMinimumSize(QtCore.QSize(0, 47))
        self.tableWidgetMyModelStats.setMaximumSize(QtCore.QSize(640, 47))
        self.tableWidgetMyModelStats.setFocusPolicy(QtCore.Qt.NoFocus)
        self.tableWidgetMyModelStats.setVerticalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.tableWidgetMyModelStats.setHorizontalScrollBarPolicy(QtCore.Qt.ScrollBarAlwaysOff)
        self.tableWidgetMyModelStats.setEditTriggers(QtGui.QAbstractItemView.NoEditTriggers)
        self.tableWidgetMyModelStats.setSelectionMode(QtGui.QAbstractItemView.NoSelection)
        self.tableWidgetMyModelStats.setSelectionBehavior(QtGui.QAbstractItemView.SelectRows)
        self.tableWidgetMyModelStats.setShowGrid(True)
        self.tableWidgetMyModelStats.setRowCount(1)
        self.tableWidgetMyModelStats.setColumnCount(5)
        self.tableWidgetMyModelStats.setObjectName(_fromUtf8("tableWidgetMyModelStats"))
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        font = QtGui.QFont()
        font.setBold(False)
        font.setWeight(50)
        item.setFont(font)
        self.tableWidgetMyModelStats.setVerticalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setHorizontalHeaderItem(0, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setHorizontalHeaderItem(1, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setHorizontalHeaderItem(2, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setHorizontalHeaderItem(3, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setHorizontalHeaderItem(4, item)
        item = QtGui.QTableWidgetItem()
        self.tableWidgetMyModelStats.setItem(0, 0, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setItem(0, 1, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setItem(0, 2, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setItem(0, 3, item)
        item = QtGui.QTableWidgetItem()
        item.setTextAlignment(QtCore.Qt.AlignHCenter|QtCore.Qt.AlignVCenter|QtCore.Qt.AlignCenter)
        self.tableWidgetMyModelStats.setItem(0, 4, item)
        self.tableWidgetMyModelStats.horizontalHeader().setVisible(True)
        self.tableWidgetMyModelStats.horizontalHeader().setDefaultSectionSize(128)
        self.tableWidgetMyModelStats.horizontalHeader().setHighlightSections(False)
        self.tableWidgetMyModelStats.horizontalHeader().setMinimumSectionSize(30)
        self.tableWidgetMyModelStats.horizontalHeader().setStretchLastSection(True)
        self.tableWidgetMyModelStats.verticalHeader().setVisible(False)
        self.tableWidgetMyModelStats.verticalHeader().setDefaultSectionSize(21)
        self.gridLayout.addWidget(self.tableWidgetMyModelStats, 0, 0, 1, 1)
        self.treeWidgetMyModel = QtGui.QTreeWidget(self.centralwidget)
        self.treeWidgetMyModel.setContextMenuPolicy(QtCore.Qt.CustomContextMenu)
        self.treeWidgetMyModel.setAutoFillBackground(False)
        self.treeWidgetMyModel.setStyleSheet(_fromUtf8("selection-color: rgb(0, 0, 127);"))
        self.treeWidgetMyModel.setFrameShape(QtGui.QFrame.StyledPanel)
        self.treeWidgetMyModel.setAlternatingRowColors(True)
        self.treeWidgetMyModel.setAnimated(False)
        self.treeWidgetMyModel.setHeaderHidden(True)
        self.treeWidgetMyModel.setObjectName(_fromUtf8("treeWidgetMyModel"))
        self.gridLayout.addWidget(self.treeWidgetMyModel, 1, 0, 1, 1)
        self.horizontalLayout = QtGui.QHBoxLayout()
        self.horizontalLayout.setObjectName(_fromUtf8("horizontalLayout"))
        self.lineEditSearchMyModel = QtGui.QLineEdit(self.centralwidget)
        self.lineEditSearchMyModel.setEnabled(False)
        self.lineEditSearchMyModel.setObjectName(_fromUtf8("lineEditSearchMyModel"))
        self.horizontalLayout.addWidget(self.lineEditSearchMyModel)
        self.btnExpandAll = QtGui.QPushButton(self.centralwidget)
        self.btnExpandAll.setEnabled(False)
        self.btnExpandAll.setMinimumSize(QtCore.QSize(53, 0))
        self.btnExpandAll.setMaximumSize(QtCore.QSize(53, 16777215))
        self.btnExpandAll.setObjectName(_fromUtf8("btnExpandAll"))
        self.horizontalLayout.addWidget(self.btnExpandAll)
        self.btnCollapseAll = QtGui.QPushButton(self.centralwidget)
        self.btnCollapseAll.setEnabled(False)
        self.btnCollapseAll.setMinimumSize(QtCore.QSize(53, 0))
        self.btnCollapseAll.setMaximumSize(QtCore.QSize(53, 16777215))
        self.btnCollapseAll.setObjectName(_fromUtf8("btnCollapseAll"))
        self.horizontalLayout.addWidget(self.btnCollapseAll)
        self.gridLayout.addLayout(self.horizontalLayout, 2, 0, 1, 1)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtGui.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 807, 21))
        self.menubar.setObjectName(_fromUtf8("menubar"))
        self.menuEdit = QtGui.QMenu(self.menubar)
        self.menuEdit.setObjectName(_fromUtf8("menuEdit"))
        self.menuHelp = QtGui.QMenu(self.menubar)
        self.menuHelp.setObjectName(_fromUtf8("menuHelp"))
        self.menuFile = QtGui.QMenu(self.menubar)
        self.menuFile.setObjectName(_fromUtf8("menuFile"))
        self.menuSettings = QtGui.QMenu(self.menubar)
        self.menuSettings.setObjectName(_fromUtf8("menuSettings"))
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtGui.QStatusBar(MainWindow)
        font = QtGui.QFont()
        font.setPointSize(8)
        self.statusbar.setFont(font)
        self.statusbar.setObjectName(_fromUtf8("statusbar"))
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QtGui.QToolBar(MainWindow)
        self.toolBar.setIconSize(QtCore.QSize(19, 19))
        self.toolBar.setObjectName(_fromUtf8("toolBar"))
        MainWindow.addToolBar(QtCore.Qt.TopToolBarArea, self.toolBar)
        self.toolBarFunctions = QtGui.QToolBar(MainWindow)
        self.toolBarFunctions.setEnabled(True)
        self.toolBarFunctions.setIconSize(QtCore.QSize(46, 60))
        self.toolBarFunctions.setToolButtonStyle(QtCore.Qt.ToolButtonTextUnderIcon)
        self.toolBarFunctions.setObjectName(_fromUtf8("toolBarFunctions"))
        MainWindow.addToolBar(QtCore.Qt.RightToolBarArea, self.toolBarFunctions)
        self.actionSelect_endpoint = QtGui.QAction(MainWindow)
        icon1 = QtGui.QIcon()
        icon1.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/endpoint.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSelect_endpoint.setIcon(icon1)
        self.actionSelect_endpoint.setObjectName(_fromUtf8("actionSelect_endpoint"))
        self.actionLoad_model = QtGui.QAction(MainWindow)
        icon2 = QtGui.QIcon()
        icon2.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/load_model.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionLoad_model.setIcon(icon2)
        self.actionLoad_model.setObjectName(_fromUtf8("actionLoad_model"))
        self.actionAbout = QtGui.QAction(MainWindow)
        icon3 = QtGui.QIcon()
        icon3.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/about.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionAbout.setIcon(icon3)
        self.actionAbout.setObjectName(_fromUtf8("actionAbout"))
        self.actionPreferences = QtGui.QAction(MainWindow)
        icon4 = QtGui.QIcon()
        icon4.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/preferences.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionPreferences.setIcon(icon4)
        self.actionPreferences.setObjectName(_fromUtf8("actionPreferences"))
        self.actionView_Log = QtGui.QAction(MainWindow)
        icon5 = QtGui.QIcon()
        icon5.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/log.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionView_Log.setIcon(icon5)
        self.actionView_Log.setObjectName(_fromUtf8("actionView_Log"))
        self.actionEdit_namespaces = QtGui.QAction(MainWindow)
        icon6 = QtGui.QIcon()
        icon6.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/namespaces.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEdit_namespaces.setIcon(icon6)
        self.actionEdit_namespaces.setObjectName(_fromUtf8("actionEdit_namespaces"))
        self.actionEdit_my_models = QtGui.QAction(MainWindow)
        self.actionEdit_my_models.setObjectName(_fromUtf8("actionEdit_my_models"))
        self.actionExit = QtGui.QAction(MainWindow)
        self.actionExit.setObjectName(_fromUtf8("actionExit"))
        self.actionEdit_mapping = QtGui.QAction(MainWindow)
        icon7 = QtGui.QIcon()
        icon7.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/mapping.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEdit_mapping.setIcon(icon7)
        self.actionEdit_mapping.setObjectName(_fromUtf8("actionEdit_mapping"))
        self.actionToolBarLoad_my_model = QtGui.QAction(MainWindow)
        self.actionToolBarLoad_my_model.setIcon(icon2)
        self.actionToolBarLoad_my_model.setObjectName(_fromUtf8("actionToolBarLoad_my_model"))
        self.actionToolBarSelect_endpoint = QtGui.QAction(MainWindow)
        self.actionToolBarSelect_endpoint.setIcon(icon1)
        self.actionToolBarSelect_endpoint.setObjectName(_fromUtf8("actionToolBarSelect_endpoint"))
        self.actionToolBarNamespaces = QtGui.QAction(MainWindow)
        self.actionToolBarNamespaces.setIcon(icon6)
        self.actionToolBarNamespaces.setObjectName(_fromUtf8("actionToolBarNamespaces"))
        self.actionToolBarMapping = QtGui.QAction(MainWindow)
        self.actionToolBarMapping.setIcon(icon7)
        self.actionToolBarMapping.setObjectName(_fromUtf8("actionToolBarMapping"))
        self.actionToolBarLog = QtGui.QAction(MainWindow)
        self.actionToolBarLog.setIcon(icon5)
        self.actionToolBarLog.setObjectName(_fromUtf8("actionToolBarLog"))
        self.actionToolBarPreferences = QtGui.QAction(MainWindow)
        self.actionToolBarPreferences.setIcon(icon4)
        self.actionToolBarPreferences.setObjectName(_fromUtf8("actionToolBarPreferences"))
        self.actionToolBaPreferences_2 = QtGui.QAction(MainWindow)
        self.actionToolBaPreferences_2.setIcon(icon4)
        self.actionToolBaPreferences_2.setObjectName(_fromUtf8("actionToolBaPreferences_2"))
        self.actionPreferencesToolBar = QtGui.QAction(MainWindow)
        self.actionPreferencesToolBar.setIcon(icon4)
        self.actionPreferencesToolBar.setObjectName(_fromUtf8("actionPreferencesToolBar"))
        self.actionSearch_by_class_name = QtGui.QAction(MainWindow)
        self.actionSearch_by_class_name.setEnabled(False)
        icon8 = QtGui.QIcon()
        icon8.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/search_by_class.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSearch_by_class_name.setIcon(icon8)
        self.actionSearch_by_class_name.setIconVisibleInMenu(True)
        self.actionSearch_by_class_name.setObjectName(_fromUtf8("actionSearch_by_class_name"))
        self.actionSearch_by_existing_instance = QtGui.QAction(MainWindow)
        self.actionSearch_by_existing_instance.setEnabled(False)
        icon9 = QtGui.QIcon()
        icon9.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/search_by_existing_instance.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSearch_by_existing_instance.setIcon(icon9)
        self.actionSearch_by_existing_instance.setObjectName(_fromUtf8("actionSearch_by_existing_instance"))
        self.actionEnrich_instance = QtGui.QAction(MainWindow)
        self.actionEnrich_instance.setEnabled(False)
        icon10 = QtGui.QIcon()
        icon10.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/enirch_instance.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionEnrich_instance.setIcon(icon10)
        self.actionEnrich_instance.setObjectName(_fromUtf8("actionEnrich_instance"))
        self.actionExport_to_file = QtGui.QAction(MainWindow)
        self.actionExport_to_file.setEnabled(False)
        icon11 = QtGui.QIcon()
        icon11.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/export_graph.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionExport_to_file.setIcon(icon11)
        self.actionExport_to_file.setObjectName(_fromUtf8("actionExport_to_file"))
        self.actionExport_to_file_2 = QtGui.QAction(MainWindow)
        self.actionExport_to_file_2.setEnabled(False)
        self.actionExport_to_file_2.setIcon(icon11)
        self.actionExport_to_file_2.setObjectName(_fromUtf8("actionExport_to_file_2"))
        self.actionSearch_endpoint_by_class_name = QtGui.QAction(MainWindow)
        self.actionSearch_endpoint_by_class_name.setEnabled(False)
        self.actionSearch_endpoint_by_class_name.setIcon(icon8)
        self.actionSearch_endpoint_by_class_name.setObjectName(_fromUtf8("actionSearch_endpoint_by_class_name"))
        self.actionSearch_endpoint_by_existing_instance = QtGui.QAction(MainWindow)
        self.actionSearch_endpoint_by_existing_instance.setEnabled(False)
        icon12 = QtGui.QIcon()
        icon12.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/search_by_instance.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSearch_endpoint_by_existing_instance.setIcon(icon12)
        self.actionSearch_endpoint_by_existing_instance.setObjectName(_fromUtf8("actionSearch_endpoint_by_existing_instance"))
        self.actionEnrich_Instance_2 = QtGui.QAction(MainWindow)
        self.actionEnrich_Instance_2.setEnabled(False)
        self.actionEnrich_Instance_2.setIcon(icon10)
        self.actionEnrich_Instance_2.setObjectName(_fromUtf8("actionEnrich_Instance_2"))
        self.actionSearch_by_instance_label = QtGui.QAction(MainWindow)
        self.actionSearch_by_instance_label.setEnabled(False)
        icon13 = QtGui.QIcon()
        icon13.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/search_by_instance_label.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionSearch_by_instance_label.setIcon(icon13)
        self.actionSearch_by_instance_label.setObjectName(_fromUtf8("actionSearch_by_instance_label"))
        self.actionSearch_endpoint_by_instance_label = QtGui.QAction(MainWindow)
        self.actionSearch_endpoint_by_instance_label.setEnabled(False)
        self.actionSearch_endpoint_by_instance_label.setIcon(icon12)
        self.actionSearch_endpoint_by_instance_label.setObjectName(_fromUtf8("actionSearch_endpoint_by_instance_label"))
        self.actionDatabase_actions = QtGui.QAction(MainWindow)
        icon14 = QtGui.QIcon()
        icon14.addPixmap(QtGui.QPixmap(_fromUtf8(":/images/database.png")), QtGui.QIcon.Normal, QtGui.QIcon.Off)
        self.actionDatabase_actions.setIcon(icon14)
        self.actionDatabase_actions.setObjectName(_fromUtf8("actionDatabase_actions"))
        self.actionDatabase_actions_2 = QtGui.QAction(MainWindow)
        self.actionDatabase_actions_2.setIcon(icon14)
        self.actionDatabase_actions_2.setObjectName(_fromUtf8("actionDatabase_actions_2"))
        self.actionCheck_for_updates = QtGui.QAction(MainWindow)
        self.actionCheck_for_updates.setObjectName(_fromUtf8("actionCheck_for_updates"))
        self.actionQuick_presentation = QtGui.QAction(MainWindow)
        self.actionQuick_presentation.setObjectName(_fromUtf8("actionQuick_presentation"))
        self.actionOnline_documentation = QtGui.QAction(MainWindow)
        self.actionOnline_documentation.setObjectName(_fromUtf8("actionOnline_documentation"))
        self.menuEdit.addAction(self.actionSearch_endpoint_by_instance_label)
        self.menuEdit.addAction(self.actionSearch_endpoint_by_class_name)
        self.menuEdit.addAction(self.actionSearch_endpoint_by_existing_instance)
        self.menuEdit.addAction(self.actionEnrich_Instance_2)
        self.menuHelp.addAction(self.actionCheck_for_updates)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionOnline_documentation)
        self.menuHelp.addAction(self.actionQuick_presentation)
        self.menuHelp.addSeparator()
        self.menuHelp.addAction(self.actionAbout)
        self.menuFile.addAction(self.actionLoad_model)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExport_to_file)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionExit)
        self.menuSettings.addAction(self.actionSelect_endpoint)
        self.menuSettings.addAction(self.actionEdit_namespaces)
        self.menuSettings.addAction(self.actionEdit_mapping)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.actionDatabase_actions)
        self.menuSettings.addAction(self.actionView_Log)
        self.menuSettings.addSeparator()
        self.menuSettings.addAction(self.actionPreferences)
        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuSettings.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        self.toolBar.addAction(self.actionToolBarLoad_my_model)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionToolBarSelect_endpoint)
        self.toolBar.addAction(self.actionToolBarNamespaces)
        self.toolBar.addAction(self.actionToolBarMapping)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionDatabase_actions_2)
        self.toolBar.addAction(self.actionToolBarLog)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPreferencesToolBar)
        self.toolBarFunctions.addAction(self.actionSearch_by_instance_label)
        self.toolBarFunctions.addAction(self.actionSearch_by_class_name)
        self.toolBarFunctions.addAction(self.actionSearch_by_existing_instance)
        self.toolBarFunctions.addAction(self.actionEnrich_instance)
        self.toolBarFunctions.addSeparator()
        self.toolBarFunctions.addAction(self.actionExport_to_file_2)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(_translate("MainWindow", "PROPheT - PeRicles Ontology Population Tool", None))
        self.tableWidgetMyModelStats.setToolTip(_translate("MainWindow", "Summary of selected models", None))
        item = self.tableWidgetMyModelStats.verticalHeaderItem(0)
        item.setText(_translate("MainWindow", "Value", None))
        item = self.tableWidgetMyModelStats.horizontalHeaderItem(0)
        item.setText(_translate("MainWindow", "External Model", None))
        item = self.tableWidgetMyModelStats.horizontalHeaderItem(1)
        item.setText(_translate("MainWindow", "My Model", None))
        item = self.tableWidgetMyModelStats.horizontalHeaderItem(2)
        item.setText(_translate("MainWindow", "Classes", None))
        item = self.tableWidgetMyModelStats.horizontalHeaderItem(3)
        item.setText(_translate("MainWindow", "Instances", None))
        item = self.tableWidgetMyModelStats.horizontalHeaderItem(4)
        item.setText(_translate("MainWindow", "Data Properties", None))
        __sortingEnabled = self.tableWidgetMyModelStats.isSortingEnabled()
        self.tableWidgetMyModelStats.setSortingEnabled(False)
        item = self.tableWidgetMyModelStats.item(0, 1)
        item.setText(_translate("MainWindow", "-", None))
        item = self.tableWidgetMyModelStats.item(0, 2)
        item.setText(_translate("MainWindow", "-", None))
        item = self.tableWidgetMyModelStats.item(0, 3)
        item.setText(_translate("MainWindow", "-", None))
        item = self.tableWidgetMyModelStats.item(0, 4)
        item.setText(_translate("MainWindow", "-", None))
        self.tableWidgetMyModelStats.setSortingEnabled(__sortingEnabled)
        self.treeWidgetMyModel.headerItem().setText(0, _translate("MainWindow", "Instance", None))
        self.treeWidgetMyModel.headerItem().setText(1, _translate("MainWindow", "Value", None))
        self.lineEditSearchMyModel.setPlaceholderText(_translate("MainWindow", "Search tree...", None))
        self.btnExpandAll.setText(_translate("MainWindow", "Expand", None))
        self.btnCollapseAll.setText(_translate("MainWindow", "Collapse", None))
        self.menuEdit.setTitle(_translate("MainWindow", "Actions", None))
        self.menuHelp.setTitle(_translate("MainWindow", "Help", None))
        self.menuFile.setTitle(_translate("MainWindow", "File", None))
        self.menuSettings.setTitle(_translate("MainWindow", "Settings", None))
        self.toolBar.setWindowTitle(_translate("MainWindow", "Preferences Toolbar", None))
        self.toolBarFunctions.setWindowTitle(_translate("MainWindow", "Functions Toolbar", None))
        self.actionSelect_endpoint.setText(_translate("MainWindow", "Select endpoint URL...", None))
        self.actionSelect_endpoint.setToolTip(_translate("MainWindow", "Select endpoint", None))
        self.actionLoad_model.setText(_translate("MainWindow", "Load model...", None))
        self.actionLoad_model.setToolTip(_translate("MainWindow", "Load my model", None))
        self.actionAbout.setText(_translate("MainWindow", "About...", None))
        self.actionPreferences.setText(_translate("MainWindow", "Preferences...", None))
        self.actionPreferences.setToolTip(_translate("MainWindow", "View Preferences", None))
        self.actionView_Log.setText(_translate("MainWindow", "View Log...", None))
        self.actionView_Log.setToolTip(_translate("MainWindow", "View Log entries", None))
        self.actionEdit_namespaces.setText(_translate("MainWindow", "Edit namespaces...", None))
        self.actionEdit_my_models.setText(_translate("MainWindow", "Edit my models...", None))
        self.actionExit.setText(_translate("MainWindow", "Exit", None))
        self.actionEdit_mapping.setText(_translate("MainWindow", "Edit mapping...", None))
        self.actionToolBarLoad_my_model.setText(_translate("MainWindow", "Load model", None))
        self.actionToolBarLoad_my_model.setToolTip(_translate("MainWindow", "Load my model", None))
        self.actionToolBarSelect_endpoint.setText(_translate("MainWindow", "Select endpoint", None))
        self.actionToolBarSelect_endpoint.setToolTip(_translate("MainWindow", "Endpoints", None))
        self.actionToolBarNamespaces.setText(_translate("MainWindow", "Namespaces", None))
        self.actionToolBarNamespaces.setToolTip(_translate("MainWindow", "Namespaces", None))
        self.actionToolBarMapping.setText(_translate("MainWindow", "Mapping", None))
        self.actionToolBarLog.setText(_translate("MainWindow", "Log", None))
        self.actionToolBarLog.setToolTip(_translate("MainWindow", "Log entries", None))
        self.actionToolBarPreferences.setText(_translate("MainWindow", "Preferences", None))
        self.actionToolBaPreferences_2.setText(_translate("MainWindow", "Preferences", None))
        self.actionPreferencesToolBar.setText(_translate("MainWindow", "Preferences", None))
        self.actionPreferencesToolBar.setToolTip(_translate("MainWindow", "Preferences", None))
        self.actionSearch_by_class_name.setText(_translate("MainWindow", "Search by class", None))
        self.actionSearch_by_class_name.setIconText(_translate("MainWindow", "Search by class", None))
        self.actionSearch_by_class_name.setToolTip(_translate("MainWindow", "Search endpoint for instances belonging to a user-defined class", None))
        self.actionSearch_by_existing_instance.setText(_translate("MainWindow", "Search by existing instance", None))
        self.actionSearch_by_existing_instance.setToolTip(_translate("MainWindow", "Search endpoint for instances similar to an existing instance", None))
        self.actionEnrich_instance.setText(_translate("MainWindow", "Enrich instance", None))
        self.actionExport_to_file.setText(_translate("MainWindow", "Export model to file", None))
        self.actionExport_to_file_2.setText(_translate("MainWindow", "Export to file", None))
        self.actionExport_to_file_2.setToolTip(_translate("MainWindow", "Export model to file", None))
        self.actionSearch_endpoint_by_class_name.setText(_translate("MainWindow", "Search endpoint by class...", None))
        self.actionSearch_endpoint_by_class_name.setToolTip(_translate("MainWindow", "Search endpoint for instances belonging to a user-defined class", None))
        self.actionSearch_endpoint_by_existing_instance.setText(_translate("MainWindow", "Search endpoint by existing instance...", None))
        self.actionSearch_endpoint_by_existing_instance.setToolTip(_translate("MainWindow", "Search endpoint for instances similar to an existing instance", None))
        self.actionEnrich_Instance_2.setText(_translate("MainWindow", "Enrich instance...", None))
        self.actionSearch_by_instance_label.setText(_translate("MainWindow", "Search by instance label", None))
        self.actionSearch_by_instance_label.setToolTip(_translate("MainWindow", "Search endpoint for instances with specific label", None))
        self.actionSearch_endpoint_by_instance_label.setText(_translate("MainWindow", "Search endpoint by instance label...", None))
        self.actionSearch_endpoint_by_instance_label.setToolTip(_translate("MainWindow", "Search endpoint for instances with specific label", None))
        self.actionDatabase_actions.setText(_translate("MainWindow", "Database actions...", None))
        self.actionDatabase_actions_2.setText(_translate("MainWindow", "Database actions...", None))
        self.actionCheck_for_updates.setText(_translate("MainWindow", "Check for updates", None))
        self.actionQuick_presentation.setText(_translate("MainWindow", "Quick presentation", None))
        self.actionOnline_documentation.setText(_translate("MainWindow", "Online documentation", None))

import main_window_resources_rc
